дізнатись який питон використовується
which python 
-------------------------------------
зміна шляху до питона
source venv/Scripts/activate
--------------------------------------
запуск локалки
python manage.py runserver
------------------------------------
змінити порт
python manage.py runserver 8001
-----------------------------------
створити суперюзера
python manage.py createsuperuser
------------------------------------
переглянути інформацію про міграції
python manage.py showmigrations
------------------------------------
створити миграцию
python manage.py makemigrations blog
-------------------------------------
переглянути sql міграції
python manage.py sqlmigrate blog 0001
-------------------------------------
виконати міграцю
python manage.py migrate blog
-------------------------------------
виклик шелу
python manage.py shell
команди в шелу:
приклад1:
from blog.models import Book
first_book = Bool.objects.first()
first_book
приклад2:
>>> from blog.models import Book, Reader, User
>>> qs = User.objects.all()
>>> str(qs.query)
>>> qs = User.objects.filter(first_name='admin')
>>> str(qs.query)
>>> qs = User.objects.filter(first_name='admin').only('first_name')
>>> str(qs.query)
>>> Book.objects.all()
>>> Book.objects.count()
>>> len(Book.objects.all())
>>> Book.objects.create(title='New book', publication_year=1999)
>>> book_a = Book(title='Book A' , publication_year = '2000')
>>> book_b = Book(title='Book B', publication_year = '1999')
>>> book_c = Book(title='Book C', publication_year='2005')
>>> Book.objects.bulk_create([book_a, book_b, book_c])
>>> book_a = Book.objects.get(title='Book A')
>>> book_b = Book.objects.get(title='Book B')
>>> book_a.title += 'tail'
>>> book_a.save(['title'])
>>> user = User.objects.first()
>>> user.username = 'tester'
>>> user.email = 'test@gmail.com'
>>> user.id = None
>>> user.save()
приклад день 3:
>>> from blog.models import Book, Reader
>>>
>>> from django.contrib.auth import get_user_model
>>> User = get_user_model()
>>>
>>> User.objects.count()
(0.000) SELECT COUNT(*) AS "__count" FROM "auth_user"; args=()
>>> Reader.objects.count()
>>> Book.objects.count()
>>> import pprint
>>> pprint.pprint(book_ls)
>>> admin_user = User.objects.get(username='admin')
>>> readers_data = [(0, 'Book A', admin_user.id), (1, 'Book B', admin_user.id), (2, 'Book C', admin_user.id)]
>>> readers = [Reader(*item) for item in readers_data]
>>> Reader.objects.bulk_create(readers)
>>> Reader.objects.count()
>>> Reader.objects.only('user_id').all()
>>> reader = Reader.objects.first()
>>> dir(reader)
>>> reader.user_id_id
>>> user = reader.user_id
>>> dir(user)
>>> user.reader_set.all()
>>> user.reader_set.count()
>>> book.reader_set.count()
>>> book.reader_set.values('user_id__username')
>>> book_a.readers.values('user__username')
>>> book_a.readers.values_list('user__username', flat=True)







--------------------------------------
--------------------------------------
--------------------------------------
--------------------------------------
--------------------------------------
--------------------------------------
--------------------------------------
--------------------------------------
--------------------------------------







в адмінці показуються моделі. 
verbose_name - alias


